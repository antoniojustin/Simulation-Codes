source('/Users/antonioqin/Desktop/PhD Work/2.Mortality/2.Paper/Simulation Codes/Codes/Main_Fun.R')
R1 = Simulation(B = 1, patients_num = 1000, hosp_coef_1 = 1.6, hosp_coef_2 = -2, tp1 = 0.2, tp2 = 0.3, tp3 = 0.4, tp4 = 0.5, tp5 = 0.6 )
R1$AUCs
R1 = Simulation(B = 1, patients_num = 10000, hosp_coef_1 = 1.6, hosp_coef_2 = -2, tp1 = 0.2, tp2 = 0.3, tp3 = 0.4, tp4 = 0.5, tp5 = 0.6 )
R1
1/(1 + exp(- hosp * beta_h1))
hosp = c(rep(1, 5000), rep(0, 5000))
beta_h1 = 1.6
beta_h2 = 0.2
1/(1 + exp(- hosp * beta_h1))
1/(1 + exp(- hosp * beta_h1))
1/(1 + exp(- hosp * beta_h2))
1/(1 + exp(- 1 * beta_h1))
1/(1 + exp(- 1 * beta_h2))
1/(1 + exp(- 1 * beta_h1))
1/(1 + exp(- 1 * beta_h2))
?rbinom
length(a)
a = 1/(1 + exp(- hosp * beta_h1))
b = 1/(1 + exp(- hosp * beta_h2))
length(a)
table(M1)
M1 = rbinom(10000, 1, a)
table(M1)
table(rbinom(10000, 1, b))
l1 = glm(M1 ~ hosp)
l1
0.4966 + 0.3328
exp(1.6)
exp(-1.6)
l1 = glm(M1 ~ hosp, family = binomial())
l1
stage_1_prob = 1/(1 + exp(- hosp * beta_h1))
death1 = rbinom(B, 1, stage_1_prob)
B = 10000
beta_h1 = 1.6
beta_h2 = 0.2
# Variable Simulation:
hosp = c(rep(1, B/2), rep(0, B/2))
stage_1_prob = 1/(1 + exp(- hosp * beta_h1))
death1 = rbinom(B, 1, stage_1_prob)
table(death1)
idx = death1[death1 == 1]
which(death1 == 0)
length(idx)
length(osp[idx])
length(hosp[idx])
death_all = death1
death_all[idx] = death2
idx = which(death1 == 0)
stage_2_prob = 1/(1 + exp(- hosp[idx] * beta_h1))
death2 = rbinom(length(idx), 1, stage_2_prob)
table(stage_2_prob)
table(death2)
length(idx)
idx = which(death1 == 0)
stage_2_prob = 1/(1 + exp(- hosp[idx] * beta_h2))
death2 = rbinom(length(idx), 1, stage_2_prob)
l1 = glm(M1 ~ hosp, family = binomial())
l1
l1 = glm(death1 ~ hosp, family = binomial())
l1
l1 = glm(death1 ~ hosp, family = binomial())
l1
l2 = glm(death2 ~ hosp[idx], family = binomial())
l2
death_all = death1
death_all[idx] = death2
table(death_all)
table(death_all[idx])
model1 = glm(death_all ~ hosp, family = binomial())
model1
m1 = glm(death1 ~ hosp, family = binomial())
m2 = glm(death2 ~ hosp, family = binomial())
m2 = glm(death2 ~ hosp[idx], family = binomial())
m1
m2
m1$fitted.values
m1$coefficients
cbind(1, hosp)
m1$coefficients %*% cbind(1, hosp)
m1$coefficients %*% cbind(1, hosp)
dim(m1$coefficients)
m1$coefficients
model.matrix(~ hosp)
model.matrix(~ hosp) %*% m1$coefficients
table(p_total)
p_total = model.matrix(~ hosp) %*% m1$coefficients
table(p_total)
predict(m1, newdata = hosp, type = "response")
predict(m1, newdata = data.frame(hosp), type = "response")
p_t = predict(m1, newdata = data.frame(hosp), type = "response")
table(p_t)
table(stage_1_prob)
p2 = predict(m2, newdata = data.frame(hosp), type = "response")
table(p2)
m2
p2 = predict(m2, newdata = data.frame(hosp), type = "response")
df = data.frame(hosp)
View(df)
table(p2)
dim(newdata)
p2 = predict(m2, newdata = data.frame(hosp), type = "response")
m2
table(p2)
X = model.matrix(~ hosp)
X %*% coef(m1)
p1 = X %*% coef(m1)
table(p1)
p1 =  1/(1 + exp( - X %*% coef(m1)))
table(p1)
p2 = 1/(1 + exp( - X %*% coef(m2)))
table(p2)
p_full = p1 * p2 * (1 - p1)
table(p_full)
p_full = p1 + p2 * (1 - p1)
p_full
table(p_full)
p_one_part = 1/(1 + exp( - X %*% coef(model1)))
table(p_one_part)
set.seed(42)  # For reproducibility
n <- 10000  # Number of individuals
# Generate risk factors (e.g., age, severity score)
age <- rnorm(n, mean = 65, sd = 10)   # Normally distributed ages
severity <- runif(n, min = 0, max = 1)  # Random severity score (0 to 1)
# Define different risk effects on early vs. late mortality
beta1_age <- 0.05  # Stronger effect of age on early mortality
beta1_severity <- 2  # Severity has high impact on early mortality
beta2_age <- 0.02  # Weaker effect of age on late mortality
beta2_severity <- 1  # Severity has a lower effect on late mortality
# Logistic transformation to get probabilities (p1 and p2)
p1 <- plogis(-5 + beta1_age * age + beta1_severity * severity)
p2 <- plogis(-7 + beta2_age * age + beta2_severity * severity)  # Given survival past month 1
# Simulate survival outcomes
death1 <- rbinom(n, size = 1, prob = p1)  # Death in month 1
death2 <- rbinom(n, size = 1, prob = p2) * (1 - death1)  # Death in month 2 (if survived month 1)
# Outcome: 0 = survived both months, 1 = died in month 1, 2 = died in month 2
status <- death1 + death2 * 2
# Create DataFrame
data <- data.frame(age, severity, death1, death2, status)
# Check summary
table(status)
model_one <- glm((death1 | death2) ~ age + severity, family = binomial(), data = data)
# Model 2: Two-part model
model_p1 <- glm(death1 ~ age + severity, family = binomial(), data = data)
model_p2 <- glm(death2 ~ age + severity, family = binomial(), data = subset(data, death1 == 0))
# Compare results
summary(model_one)
summary(model_p1)
summary(model_p2)
library(MASS)  # For logistic regression
library(caret) # For accuracy calculations
library(mltools) # For log loss calculation
set.seed(42)  # Ensure reproducibility
# Number of individuals
n <- 10000
# Generate risk factors
age <- rnorm(n, mean = 65, sd = 10)  # Normally distributed ages
severity <- runif(n, min = 0, max = 1)  # Random severity score (0 to 1)
# Define different risk effects on early vs. late mortality
beta1_age <- 0.05  # Stronger effect of age on early mortality
beta1_severity <- 2  # Severity has high impact on early mortality
beta2_age <- 0.02  # Weaker effect of age on late mortality
beta2_severity <- 1  # Severity has a lower effect on late mortality
# Logistic transformation to get probabilities (p1 and p2)
p1 <- plogis(-5 + beta1_age * age + beta1_severity * severity)
p2 <- plogis(-7 + beta2_age * age + beta2_severity * severity)  # Given survival past month 1
# Simulate survival outcomes
death1 <- rbinom(n, size = 1, prob = p1)  # Death in month 1
death2 <- rbinom(n, size = 1, prob = p2) * (1 - death1)  # Death in month 2 (if survived month 1)
# Outcome: 0 = survived both months, 1 = died in month 1, 2 = died in month 2
status <- death1 + death2 * 2
# Create data frame
data <- data.frame(age, severity, death1, death2, status)
# Define target variables
y_total <- as.integer(death1 | death2)  # Binary: death within 2 months
y_p1 <- death1  # Death in 1st month
y_p2 <- death2  # Death in 2nd month (given survived 1st month)
# One-part model: Predicting total 2-month mortality
model_one <- glm(y_total ~ age + severity, family = binomial(), data = data)
# Two-part model
model_p1 <- glm(y_p1 ~ age + severity, family = binomial(), data = data)
model_p2 <- glm(y_p2 ~ age + severity, family = binomial(), data = subset(data, death1 == 0))
library(MASS)  # For logistic regression
library(caret) # For accuracy calculations
library(mltools) # For log loss calculation
set.seed(42)  # Ensure reproducibility
# Number of individuals
n <- 10000
# Generate risk factors
age <- rnorm(n, mean = 65, sd = 10)  # Normally distributed ages
severity <- runif(n, min = 0, max = 1)  # Random severity score (0 to 1)
# Define different risk effects on early vs. late mortality
beta1_age <- 0.05  # Stronger effect of age on early mortality
beta1_severity <- 2  # Severity has high impact on early mortality
beta2_age <- 0.02  # Weaker effect of age on late mortality
beta2_severity <- 1  # Severity has a lower effect on late mortality
# Logistic transformation to get probabilities (p1 and p2)
p1 <- plogis(-5 + beta1_age * age + beta1_severity * severity)
p2 <- plogis(-7 + beta2_age * age + beta2_severity * severity)  # Given survival past month 1
# Simulate survival outcomes
death1 <- rbinom(n, size = 1, prob = p1)  # Death in month 1
death2 <- rbinom(n, size = 1, prob = p2) * (1 - death1)  # Death in month 2 (if survived month 1)
# Outcome: 0 = survived both months, 1 = died in month 1, 2 = died in month 2
status <- death1 + death2 * 2
# Create data frame
data <- data.frame(age, severity, death1, death2, status)
# Define target variables
y_total <- as.integer(death1 | death2)  # Binary: death within 2 months
y_p1 <- death1  # Death in 1st month
y_p2 <- death2  # Death in 2nd month (given survived 1st month)
# One-part model: Predicting total 2-month mortality
model_one <- glm(y_total ~ age + severity, family = binomial(), data = data)
# Two-part model
model_p1 <- glm(y_p1 ~ age + severity, family = binomial(), data = data)
# Fit model_p2 only for those who survived month 1
data_p2 <- subset(data, death1 == 0)  # Subset data for those who survived month 1
data_p2 <- data_p2[, c("age", "severity", "death2")]  # Select only relevant columns
model_p2 <- glm(death2 ~ age + severity, family = binomial(), data = data_p2)
# Predictions
pred_one <- predict(model_one, newdata = data, type = "response")
pred_p1 <- predict(model_p1, newdata = data, type = "response")
# Initialize p2 predictions with zeros
pred_p2 <- rep(0, n)
pred_p2[data$death1 == 0] <- predict(model_p2, newdata = data_p2, type = "response")
# Compute overall probability using the two-part model
pred_two_part <- pred_p1 + (1 - pred_p1) * pred_p2
# Evaluate performance
log_loss_one <- logLoss(y_total, pred_one)
install.packages("MLmetrics")
library(MASS)  # For logistic regression
library(caret) # For accuracy calculations
library(mltools) # For log loss calculation
library(MLmetrics)
set.seed(42)  # Ensure reproducibility
# Number of individuals
n <- 10000
# Generate risk factors
age <- rnorm(n, mean = 65, sd = 10)  # Normally distributed ages
severity <- runif(n, min = 0, max = 1)  # Random severity score (0 to 1)
# Define different risk effects on early vs. late mortality
beta1_age <- 0.05  # Stronger effect of age on early mortality
beta1_severity <- 2  # Severity has high impact on early mortality
beta2_age <- 0.02  # Weaker effect of age on late mortality
beta2_severity <- 1  # Severity has a lower effect on late mortality
# Logistic transformation to get probabilities (p1 and p2)
p1 <- plogis(-5 + beta1_age * age + beta1_severity * severity)
p2 <- plogis(-7 + beta2_age * age + beta2_severity * severity)  # Given survival past month 1
# Simulate survival outcomes
death1 <- rbinom(n, size = 1, prob = p1)  # Death in month 1
death2 <- rbinom(n, size = 1, prob = p2) * (1 - death1)  # Death in month 2 (if survived month 1)
# Outcome: 0 = survived both months, 1 = died in month 1, 2 = died in month 2
status <- death1 + death2 * 2
# Create data frame
data <- data.frame(age, severity, death1, death2, status)
# Define target variables
y_total <- as.integer(death1 | death2)  # Binary: death within 2 months
y_p1 <- death1  # Death in 1st month
y_p2 <- death2  # Death in 2nd month (given survived 1st month)
# One-part model: Predicting total 2-month mortality
model_one <- glm(y_total ~ age + severity, family = binomial(), data = data)
# Two-part model
model_p1 <- glm(y_p1 ~ age + severity, family = binomial(), data = data)
# Fit model_p2 only for those who survived month 1
data_p2 <- subset(data, death1 == 0)  # Subset data for those who survived month 1
data_p2 <- data_p2[, c("age", "severity", "death2")]  # Select only relevant columns
model_p2 <- glm(death2 ~ age + severity, family = binomial(), data = data_p2)
# Predictions
pred_one <- predict(model_one, newdata = data, type = "response")
pred_p1 <- predict(model_p1, newdata = data, type = "response")
# Initialize p2 predictions with zeros
pred_p2 <- rep(0, n)
pred_p2[data$death1 == 0] <- predict(model_p2, newdata = data_p2, type = "response")
# Compute overall probability using the two-part model
pred_two_part <- pred_p1 + (1 - pred_p1) * pred_p2
# Evaluate performance
log_loss_one <- logLoss(y_total, pred_one)
library(MASS)  # For logistic regression
library(caret) # For accuracy calculations
library(mltools) # For log loss calculation
logLoss <- function(actual, predicted) {
epsilon <- 1e-15  # Prevent log(0) errors
predicted <- pmax(pmin(predicted, 1 - epsilon), epsilon)
-mean(actual * log(predicted) + (1 - actual) * log(1 - predicted))
}
set.seed(42)  # Ensure reproducibility
# Number of individuals
n <- 10000
# Generate risk factors
age <- rnorm(n, mean = 65, sd = 10)  # Normally distributed ages
severity <- runif(n, min = 0, max = 1)  # Random severity score (0 to 1)
# Define different risk effects on early vs. late mortality
beta1_age <- 0.05  # Stronger effect of age on early mortality
beta1_severity <- 2  # Severity has high impact on early mortality
beta2_age <- 0.02  # Weaker effect of age on late mortality
beta2_severity <- 1  # Severity has a lower effect on late mortality
# Logistic transformation to get probabilities (p1 and p2)
p1 <- plogis(-5 + beta1_age * age + beta1_severity * severity)
p2 <- plogis(-7 + beta2_age * age + beta2_severity * severity)  # Given survival past month 1
# Simulate survival outcomes
death1 <- rbinom(n, size = 1, prob = p1)  # Death in month 1
death2 <- rbinom(n, size = 1, prob = p2) * (1 - death1)  # Death in month 2 (if survived month 1)
# Outcome: 0 = survived both months, 1 = died in month 1, 2 = died in month 2
status <- death1 + death2 * 2
# Create data frame
data <- data.frame(age, severity, death1, death2, status)
# Define target variables
y_total <- as.integer(death1 | death2)  # Binary: death within 2 months
y_p1 <- death1  # Death in 1st month
y_p2 <- death2  # Death in 2nd month (given survived 1st month)
# One-part model: Predicting total 2-month mortality
model_one <- glm(y_total ~ age + severity, family = binomial(), data = data)
# Two-part model
model_p1 <- glm(y_p1 ~ age + severity, family = binomial(), data = data)
# Fit model_p2 only for those who survived month 1
data_p2 <- subset(data, death1 == 0)  # Subset data for those who survived month 1
data_p2 <- data_p2[, c("age", "severity", "death2")]  # Select only relevant columns
model_p2 <- glm(death2 ~ age + severity, family = binomial(), data = data_p2)
# Predictions
pred_one <- predict(model_one, newdata = data, type = "response")
pred_p1 <- predict(model_p1, newdata = data, type = "response")
# Initialize p2 predictions with zeros
pred_p2 <- rep(0, n)
pred_p2[data$death1 == 0] <- predict(model_p2, newdata = data_p2, type = "response")
# Compute overall probability using the two-part model
pred_two_part <- pred_p1 + (1 - pred_p1) * pred_p2
# Evaluate performance
log_loss_one <- logLoss(y_total, pred_one)
log_loss_two_part <- logLoss(y_total, pred_two_part)
accuracy_one <- sum((pred_one > 0.5) == y_total) / length(y_total)
accuracy_two_part <- sum((pred_two_part > 0.5) == y_total) / length(y_total)
# Compare results
comparison <- data.frame(
Model = c("One-Part Model", "Two-Part Model"),
Log_Loss = c(log_loss_one, log_loss_two_part),
Accuracy = c(accuracy_one, accuracy_two_part)
)
# Print comparison
print(comparison)
library(MASS)  # For logistic regression
library(caret) # For accuracy calculations
library(mltools) # For log loss calculation
logLoss <- function(actual, predicted) {
epsilon <- 1e-15  # Prevent log(0) errors
predicted <- pmax(pmin(predicted, 1 - epsilon), epsilon)
-mean(actual * log(predicted) + (1 - actual) * log(1 - predicted))
}
set.seed(42)  # Ensure reproducibility
# Number of individuals
n <- 50000
# Generate risk factors
age <- rnorm(n, mean = 65, sd = 10)  # Normally distributed ages
severity <- runif(n, min = 0, max = 1)  # Random severity score (0 to 1)
# Define different risk effects on early vs. late mortality
beta1_age <- 0.05  # Stronger effect of age on early mortality
beta1_severity <- 2  # Severity has high impact on early mortality
beta2_age <- 0.02  # Weaker effect of age on late mortality
beta2_severity <- 1  # Severity has a lower effect on late mortality
# Logistic transformation to get probabilities (p1 and p2)
p1 <- plogis(-5 + beta1_age * age + beta1_severity * severity)
p2 <- plogis(-7 + beta2_age * age + beta2_severity * severity)  # Given survival past month 1
# Simulate survival outcomes
death1 <- rbinom(n, size = 1, prob = p1)  # Death in month 1
death2 <- rbinom(n, size = 1, prob = p2) * (1 - death1)  # Death in month 2 (if survived month 1)
# Outcome: 0 = survived both months, 1 = died in month 1, 2 = died in month 2
status <- death1 + death2 * 2
# Create data frame
data <- data.frame(age, severity, death1, death2, status)
# Define target variables
y_total <- as.integer(death1 | death2)  # Binary: death within 2 months
y_p1 <- death1  # Death in 1st month
y_p2 <- death2  # Death in 2nd month (given survived 1st month)
# One-part model: Predicting total 2-month mortality
model_one <- glm(y_total ~ age + severity, family = binomial(), data = data)
# Two-part model
model_p1 <- glm(y_p1 ~ age + severity, family = binomial(), data = data)
# Fit model_p2 only for those who survived month 1
data_p2 <- subset(data, death1 == 0)  # Subset data for those who survived month 1
data_p2 <- data_p2[, c("age", "severity", "death2")]  # Select only relevant columns
model_p2 <- glm(death2 ~ age + severity, family = binomial(), data = data_p2)
# Predictions
pred_one <- predict(model_one, newdata = data, type = "response")
pred_p1 <- predict(model_p1, newdata = data, type = "response")
# Initialize p2 predictions with zeros
pred_p2 <- rep(0, n)
pred_p2[data$death1 == 0] <- predict(model_p2, newdata = data_p2, type = "response")
# Compute overall probability using the two-part model
pred_two_part <- pred_p1 + (1 - pred_p1) * pred_p2
# Evaluate performance
log_loss_one <- logLoss(y_total, pred_one)
log_loss_two_part <- logLoss(y_total, pred_two_part)
accuracy_one <- sum((pred_one > 0.5) == y_total) / length(y_total)
accuracy_two_part <- sum((pred_two_part > 0.5) == y_total) / length(y_total)
# Compare results
comparison <- data.frame(
Model = c("One-Part Model", "Two-Part Model"),
Log_Loss = c(log_loss_one, log_loss_two_part),
Accuracy = c(accuracy_one, accuracy_two_part)
)
# Print comparison
print(comparison)
hosp2 = sample(1:B)
hosp2 = sample(1:B, replace = TRUE)
hosp2 = sample(1:10, replace = TRUE)
hosp2 = sample(1:10, replace = TRUE) # Integer
tables(hosp2)
table(hosp2)
hosp2 = sample(1:10, B, replace = TRUE) # Integer
table(hosp2)
entropy_s = function(incidence, probability){
idx_1 = which(incidence == 1)
idx_0 = which(incidence == 0)
return(-(sum(log(probability[idx_1])) + sum(log(1 - probability[idx_0])))/length(incidence))
}
df = model.matrix( ~ hosp0 + hosp1 + hosp2 - 1)
View(df)
hosp0 = c(rep(1, B/2), rep(0, B/2)) # Binary
hosp1 = rnorm(B) # Continuous
hosp2 = sample(1:10, B, replace = TRUE) # Integer
df = model.matrix( ~ hosp0 + hosp1 + hosp2 - 1)
stage_1_prob = 1/(1 + exp(- rep(beta_h1, 3) %*% df))
rep(beta_h1, 3)
dim(rep(beta_h1, 3))
stage_1_prob = 1/(1 + exp(- df %*%  rep(beta_h1, 3)))
table(stage_1_prob)
his(stage_1_prob)
hist(stage_1_prob)
death1 = rbinom(B, 1, stage_1_prob)
table(death1)
B = 10000
beta_h1 = 0.6
beta_h2 = -1
# Variable Simulation:
hosp0 = c(rep(1, B/2), rep(0, B/2)) # Binary
hosp1 = rnorm(B) # Continuous
hosp2 = sample(1:10, B, replace = TRUE) # Integer
df = model.matrix( ~ hosp0 + hosp1 + hosp2 - 1)
stage_1_prob = 1/(1 + exp(- df %*%  rep(beta_h1, 3)))
death1 = rbinom(B, 1, stage_1_prob)
table(death1)
hosp0 = c(rep(1, B/2), rep(0, B/2)) # Binary
hosp1 = rnorm(B) # Continuous
hosp2 = sample(1:5, B, replace = TRUE) # Integer
df = model.matrix( ~ hosp0 + hosp1 + hosp2 - 1)
B = 10000
beta_h1 = 0.5
beta_h2 = -1
# Variable Simulation:
hosp0 = c(rep(1, B/2), rep(0, B/2)) # Binary
hosp1 = rnorm(B) # Continuous
hosp2 = sample(1:5, B, replace = TRUE) # Integer
df = model.matrix( ~ hosp0 + hosp1 + hosp2 - 1)
stage_1_prob = 1/(1 + exp(- df %*%  rep(beta_h1, 3)))
death1 = rbinom(B, 1, stage_1_prob)
table(death1)
table(hosp1)
hist(hosp1)
B = 10000
beta_h1 = 0.5
beta_h2 = -1
# Variable Simulation:
hosp0 = c(rep(1, B/2), rep(0, B/2)) # Binary
hosp1 = rnorm(B) * 0.1 # Continuous
hosp2 = sample(1:5, B, replace = TRUE) * 0.1 # Integer
df = model.matrix( ~ hosp0 + hosp1 + hosp2 - 1)
stage_1_prob = 1/(1 + exp(- df %*%  rep(beta_h1, 3)))
death1 = rbinom(B, 1, stage_1_prob)
table(death1)
df[idx:]
df[idx,]
idx = which(death1 == 0)
stage_2_prob = 1/(1 + exp(- df[idx,] %*%  rep(beta_h2, 3)))
death2 = rbinom(length(idx), 1, stage_2_prob)
table(death2)
death_all = death1
death_all[idx] = death2
table(death_all)
data_full <- data.frame(df, death1 = death1, death_all = death_all)
View(data_full)
set.seed(100)
train_indices <- sample(1:nrow(data_full), size = 0.8 * nrow(data_full))
train_data <- data_full[train_indices, ]
test_data <- data_full[-train_indices, ]
View(train_data)
model1 = glm(death_all ~ hosp0 + hosp1 + hosp2, data = train_data, family = binomial())
p_one_part = predict(model1, newdata = test_data, type = "response")
p_one_part
hist(p_one_part)
subset = train_data[train_data$death1 == 0,]
subset = train_data[train_data$death1 == 0,]
m2 = glm(death_all ~ hosp0 + hosp1 + hosp2, data = subset, family = binomial())
m2
View(test_data)
X_test <- test_data[, 1:3]
View(X_test)
p1 = predict(m1, newdata = X_test, type = "response")
p2 = predict(m2, newdata = X_test, type = "response")
View(test_data)
type(X_test)
class(X_test)
?predict
